"""
Django settings for GreenDealAnnotations project.

Generated by 'django-admin startproject' using Django 4.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import subprocess
from datetime import datetime
from pathlib import Path
import os

from django.core.exceptions import ImproperlyConfigured


# Secrets will be stored in environment variables. Run script in top level "commands" directory to set them.
def get_secret(setting):
    """
    Get the secret variable or return explicit exception.
    Use this every time you need to define a sensitive information
    to load it from an environment variable instead of hardcoding it.
    Example: SECRET_KEY = get_secret('DJANGO_SECRET_KEY')
    """
    try:
        return os.environ[setting]
    except KeyError:
        error_msg = f'Set the {setting} environment variable.'
        raise ImproperlyConfigured(error_msg)

def get_git_changeset_timestamp(absolute_path):
    """
    This function takes the absolute_path directory as a parameter and calls the 'git log'-shell command to show
    the Unix timestamp of the HEAD revision in the direcory.
    The timestamp is parsed and converted to a string, then included in STATIC_URL of settings base file.

    :param absolute_path:
    :return:
    """
    repo_dir = absolute_path
    git_log = subprocess.Popen("git log --pretty=format:%ct --quiet -1 HEAD",
                               stdout=subprocess.PIPE,
                               stderr=subprocess.PIPE,
                               shell=True,
                               cwd=repo_dir,
                               universal_newlines=True,
                               )

    timestamp = git_log.communicate()[0]
    try:
        timestamp = datetime.utcfromtimestamp(int(timestamp))
    except ValueError:
        # Fallback for current timestamp
        return datetime.now().strftime('%Y%m%d%H%M%S')
    change_timestamp = timestamp.strftime('%Y%m%d%H%M%S')
    return change_timestamp


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret! // TODO for prod
SECRET_KEY = 'django-insecure-h+7y+molu%&pzyy$5=bz!hxcn&edvi5y&jf7@p!qs6kksmg6$5'


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'core',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'GreenDealAnnotations.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'GreenDealAnnotations.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static/'),
)

STATIC_ROOT = os.path.join(BASE_DIR, '../staticfiles')

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

# TODO

# using this timestamp function, the path changes for the users browser everytime a new commit is pushed
# this forces a web browser to reload static files when a user is viewing a website while its updated
# so the user sees the latest version and not cached old static files
timestamp = get_git_changeset_timestamp(BASE_DIR)
STATIC_URL = f'/static/{timestamp}/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
